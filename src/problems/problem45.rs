use crate::series::hexagonal::is_hexagonal;
use crate::series::pentagonal::is_pentagonal;
use crate::series::triangular::Triangular;
use crate::utils::timeit;

use anyhow::Result;
fn p() -> Result<String> {
    /*
    Triangular, pentagonal, and hexagonal
    Problem 45

    Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:

        Triangle 	  	Tn=n(n+1)/2 	  	1, 3, 6, 10, 15, ...
        Pentagonal 	  	Pn=n(3n−1)/2 	  	1, 5, 12, 22, 35, ...
        Hexagonal 	  	Hn=n(2n−1) 	  	1, 6, 15, 28, 45, ...

    It can be verified that T285 = P165 = H143 = 40755.

    Find the next triangle number that is also pentagonal and hexagonal.
    */
    let mut triangulars = Triangular::<usize>::new();

    let triangular = triangulars
        .find(|&t| is_hexagonal(t) && is_pentagonal(t) && t > 40755)
        .unwrap();
    Ok(triangular.to_string())
}

timeit::timeit!(Problem45, solve, p);

#[cfg(test)]
mod test {
    use super::*;

    #[test]
    fn test_solution() {
        assert_eq!(solve().unwrap(), "1533776805");
    }
}
