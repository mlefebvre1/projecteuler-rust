use crate::ntheory::{factor, primes};
use crate::utils::timeit;

use anyhow::Result;
fn p() -> Result<String> {
    /*
    Highly divisible triangular number
    Problem 12

    The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be
    1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

    Let us list the factors of the first seven triangle numbers:

         1: 1
         3: 1,3
         6: 1,2,3,6
        10: 1,2,5,10
        15: 1,3,5,15
        21: 1,3,7,21
        28: 1,2,4,7,14,28

    We can see that 28 is the first triangle number to have over five divisors.

    What is the value of the first triangle number to have over five hundred divisors?
    */
    const MAX_N: usize = 1000;
    const TARGET: usize = 500;
    let primes = primes::sieves(MAX_N);
    let mut k = 1;
    let mut old_k = 1;
    // First find the search space by multiplying prime numbers until the factorize is
    for prime in primes {
        old_k = k;
        k *= prime;
        if factor::factorize(k).len() > TARGET {
            break;
        }
    }
    let mut n = root(1, 1, -2 * old_k as isize).floor() as isize + 1;
    let mut k = t(n);
    while factor::factorize(k as usize).len() < TARGET {
        n += 1;
        k += n as f64;
    }
    Ok((k as usize).to_string())
}

fn root(a: isize, b: isize, c: isize) -> f64 {
    // calculate : root = (-b + sqrt(b^2-4*a*c)) / (2*a)
    let det = b.pow(2) - (4 * a * c);
    (-(b as f64) + (det as f64).sqrt()) / (2f64 * a as f64)
}

fn t(n: isize) -> f64 {
    // calculate : t(n) = n * (n+1) / 2
    n as f64 * (n as f64 + 1f64) / 2f64
}

timeit::timeit!(Problem12, solve, p);

#[cfg(test)]
mod test {
    use super::*;

    #[test]
    fn test_solution() {
        assert_eq!(solve().unwrap(), "76576500");
    }
}
