use crate::series::fibonacci::Fibonacci;
use crate::utils::timeit;
use num::Integer;

use anyhow::Result;
fn p() -> Result<String> {
    /*
    Even Fibonacci numbers
    Problem 2
    Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2,
    the first 10 terms will be:

    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

    By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the
    even-valued terms.
    */
    const MAX_F_VALUE: usize = 4e6 as usize;
    let fib_iter = Fibonacci::<usize>::new();
    Ok(fib_iter
        .take_while(|x| *x <= MAX_F_VALUE)
        .filter(|x| x.is_even())
        .sum::<usize>()
        .to_string())
}

timeit::timeit!(Problem02, solve, p);

#[cfg(test)]
mod test {
    use super::*;

    #[test]
    fn test_solution() {
        assert_eq!(solve().unwrap(), "4613732");
    }
}
