use crate::series::{
    heptagonal::Heptagonal, hexagonal::Hexagonal, octagonal::Octagonal, pentagonal::Pentagonal,
    square::Square, triangular::Triangular,
};
use crate::utils::integers::int_to_vec_of_u8;
use anyhow::Result;

pub fn p() -> Result<String> {
    /*
    Cyclical figurate numbers
    Problem 61

    Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and
    are generated by the following formulae:
    Triangle 	  	P3,n=n(n+1)/2 	  	1, 3, 6, 10, 15, ...
    Square 	  	    P4,n=n^2 	  	    1, 4, 9, 16, 25, ...
    Pentagonal 	  	P5,n=n(3n−1)/2 	  	1, 5, 12, 22, 35, ...
    Hexagonal 	  	P6,n=n(2n−1) 	  	1, 6, 15, 28, 45, ...
    Heptagonal 	  	P7,n=n(5n−3)/2 	  	1, 7, 18, 34, 55, ...
    Octagonal 	  	P8,n=n(3n−2) 	  	1, 8, 21, 40, 65, ...

    The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

        The set is cyclic, in that the last two digits of each number is the first two digits of the next number
        (including the last number with the first).
        Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented by
        a different number in the set.
        This is the only set of 4-digit numbers with this property.

    Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square,
    pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.
    */
    let polygonals = make_polygonals();
    let polygonals_visited = [false; 6];
    for n in &polygonals[0] {
        let n_str = int_to_vec_of_u8(n);
        let mut visited_copy = polygonals_visited.to_vec();
        visited_copy[0] = true;
        let (is_done, cyclic_sum) =
            cyclical_figurate_recursive_search(&n_str[0..2], *n, &visited_copy, &polygonals);
        if is_done {
            return Ok((cyclic_sum + n).to_string());
        }
    }
    panic!();
}

fn make_polygonals() -> Vec<Vec<usize>> {
    /*
    Worst case is triangular : t(n) = n*(n+1)/2
    Let's find n for t(n) = 10000
    n^2 + n - 20000 = 0
    Find the root with a = 1, b = 1, c = -20000
    n = (-b + sqrt(b^2-4*a*c)) / (2*a)
    n = (-1 + sqrt(1-4*1*-20000) / 2
    n ~= 140.42.. so 141
    */
    const MAX_N: usize = 141;
    let triangular = Triangular::<usize>::new();
    let triangular: Vec<usize> = triangular
        .take(MAX_N)
        .filter(|&t| t > 1000 && t < 10000)
        .collect();
    let square = Square::<usize>::new();
    let square: Vec<usize> = square
        .take(MAX_N)
        .filter(|&t| t > 1000 && t < 10000)
        .collect();
    let pentagonal = Pentagonal::<usize>::new();
    let pentagonal: Vec<usize> = pentagonal
        .take(MAX_N)
        .filter(|&t| t > 1000 && t < 10000)
        .collect();
    let hexagonal = Hexagonal::<usize>::new();
    let hexagonal: Vec<usize> = hexagonal
        .take(MAX_N)
        .filter(|&t| t > 1000 && t < 10000)
        .collect();
    let heptagonal = Heptagonal::<usize>::new();
    let heptagonal: Vec<usize> = heptagonal
        .take(MAX_N)
        .filter(|&t| t > 1000 && t < 10000)
        .collect();
    let octagonal = Octagonal::<usize>::new();
    let octagonal: Vec<usize> = octagonal
        .take(MAX_N)
        .filter(|&t| t > 1000 && t < 10000)
        .collect();
    vec![
        triangular, square, pentagonal, hexagonal, heptagonal, octagonal,
    ]
}

fn generate_next_candidates(
    last_two_digits: &[u8],
    visited: &[bool],
    polygonals: &[Vec<usize>],
) -> Vec<(usize, usize)> {
    /* if the first 2 digits match the last two digits of our number, this is a potential next candidate */
    let polygonal_visited =
        visited
            .iter()
            .zip(polygonals)
            .enumerate()
            .filter_map(|(index, (visit, polygonal))| {
                if !visit {
                    return Some((index, polygonal));
                }
                None
            });
    let mut ans = Vec::new();
    for (index, polygonal) in polygonal_visited {
        for n in polygonal {
            let n_vec = int_to_vec_of_u8(n);
            if &n_vec[0..2] == last_two_digits {
                ans.push((index, *n));
            }
        }
    }
    ans
}

fn all_visited(visited: &[bool]) -> bool {
    /* True if all polygonals were used */
    for value in visited {
        if !value {
            return false;
        }
    }
    true
}

fn cyclical_figurate_recursive_search(
    first_two_digits: &[u8],
    n: usize,
    visited: &[bool],
    polygonals: &[Vec<usize>],
) -> (bool, usize) {
    let n_str = int_to_vec_of_u8(&n);
    if all_visited(visited) && &n_str[2..4] == first_two_digits {
        return (true, 0);
    }
    for (index, candidate) in generate_next_candidates(&n_str[2..4], visited, polygonals).iter() {
        let mut visited_copy: Vec<bool> = visited.to_vec();
        visited_copy[*index] = true;
        let (is_done, total) = cyclical_figurate_recursive_search(
            first_two_digits,
            *candidate,
            &visited_copy,
            polygonals,
        );
        if is_done {
            return (true, total + candidate);
        }
    }
    (false, 0)
}

#[cfg(test)]
mod test {
    use super::*;

    #[test]
    fn test_solution() {
        assert_eq!(p().unwrap(), "28684");
    }
}
